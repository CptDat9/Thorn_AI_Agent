{
  "address": "0xBDc732d775cD15448021fbcc90fc59516206875A",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comet",
          "type": "address"
        }
      ],
      "name": "changeComet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_government",
          "type": "address"
        }
      ],
      "name": "changeGovernment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "target",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "value",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "gorvermentExec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "government",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_government",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comet",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f7d5febebba7bd740a51a011c86ad405ebd2e8ae45260a82ed13b176e9aa32e",
  "receipt": {
    "to": null,
    "from": "0x3674f65EFD65f9072bCb6DA6ed0D99559CA2FC02",
    "contractAddress": "0xBDc732d775cD15448021fbcc90fc59516206875A",
    "transactionIndex": 3,
    "gasUsed": "775536",
    "logsBloom": "0x
    "blockHash": "0x688613bc4e7d4c9f48d1629334698ec41e5acc211c0576bb7f32a28beff13212",
    "transactionHash": "0x0f7d5febebba7bd740a51a011c86ad405ebd2e8ae45260a82ed13b176e9aa32e",
    "logs": [],
    "blockNumber": 315445869,
    "cumulativeGasUsed": "1059057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b8af876ef35022b1e4e01fc7154897fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comet\",\"type\":\"address\"}],\"name\":\"changeComet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_government\",\"type\":\"address\"}],\"name\":\"changeGovernment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"gorvermentExec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"government\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_government\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol\":\"CompoundV3StakingUSDCModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(\\n        address spender,\\n        uint256 currentAllowance,\\n        uint256 requestedDecrease\\n    );\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeCall(token.transferFrom, (from, to, value))\\n        );\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 requestedDecrease\\n    ) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(\\n                    spender,\\n                    currentAllowance,\\n                    requestedDecrease\\n                );\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        bytes memory approvalCall = abi.encodeCall(\\n            token.approve,\\n            (spender, value)\\n        );\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeCall(token.approve, (spender, 0))\\n            );\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(\\n        IERC1363 token,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(\\n        IERC1363 token,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(\\n                gas(),\\n                token,\\n                0,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0x20\\n            )\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (\\n            returnSize == 0 ? address(token).code.length == 0 : returnValue != 1\\n        ) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(\\n        IERC20 token,\\n        bytes memory data\\n    ) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(\\n                gas(),\\n                token,\\n                0,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0x20\\n            )\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return\\n            success &&\\n            (\\n                returnSize == 0\\n                    ? address(token).code.length > 0\\n                    : returnValue == 1\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdc122b9206fd06cf7c6a6c91292b75f7297425d49c960cf25573e0fe485a3604\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/IModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IModule {\\n    function deposit(bytes memory data) external;\\n\\n    function withdraw(bytes memory data) external;\\n\\n    function getTotalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xffb17d82b895ede03d276a84f63cfe01c0f9ab8ab6ba0020e4d08aeece14bdad\",\"license\":\"MIT\"},\"contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\nimport \\\"../../../interfaces/IModule.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IComet {\\n    function supply(address asset, uint256 amount) external;\\n\\n    function withdraw(address asset, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function baseToken() external view returns (address);\\n}\\n\\ncontract CompoundV3StakingUSDCModule is IModule, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    address public treasury;\\n    address public government;\\n    address public usdc;\\n    address public comet;\\n\\n    modifier onlyTreasury() {\\n        require(msg.sender == treasury, \\\"Only agent\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernment() {\\n        require(msg.sender == government, \\\"Only governance\\\");\\n        _;\\n    }\\n\\n    function init(\\n        address _treasury,\\n        address _government,\\n        address _usdc,\\n        address _comet\\n    ) public initializer {\\n        treasury = _treasury;\\n        government = _government;\\n        usdc = _usdc;\\n        comet = _comet;\\n    }\\n\\n    // treasury functions\\n\\n    function deposit(bytes memory /*data*/) public override onlyTreasury {\\n        uint256 usdcBalance = IERC20(usdc).balanceOf(address(this));\\n        require(usdcBalance > 0, \\\"No USDC to deposit\\\");\\n        IERC20(usdc).approve(comet, usdcBalance);\\n        IComet(comet).supply(usdc, usdcBalance);\\n    }\\n\\n    function withdraw(bytes memory /*data*/) public override onlyTreasury {\\n        uint256 compoundBalance = IComet(comet).balanceOf(address(this));\\n        require(compoundBalance > 0, \\\"No balance to withdraw\\\");\\n        IComet(comet).withdraw(usdc, compoundBalance);\\n        uint256 usdcInContract = IERC20(usdc).balanceOf(address(this));\\n        IERC20(usdc).safeTransfer(treasury, usdcInContract);\\n    }\\n\\n    // governance functions\\n\\n    function changeGovernment(address _government) public onlyGovernment {\\n        government = _government;\\n    }\\n\\n    function gorvermentExec(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data\\n    ) public onlyGovernment {\\n        for (uint256 i = 0; i < target.length; i++)\\n            _call(target[i], value[i], data[i]);\\n    }\\n\\n    // view functions\\n\\n    function getTotalValue() public view override returns (uint256) {\\n        uint256 usdcInContract = IERC20(usdc).balanceOf(address(this));\\n        uint256 usdcInCompound = IComet(comet).balanceOf(address(this));\\n        return usdcInContract + usdcInCompound;\\n    }\\n\\n    // internal functions\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        assembly {\\n            let success := call(\\n                gas(),\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            if iszero(success) {\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function changeComet(address _comet) public onlyGovernment {\\n        comet = _comet;\\n    }\\n}\\n\",\"keccak256\":\"0x6cab3af76dccfc46209b1b2aed718d6404a9969e9d39cf9eeb8d5bbca42e0fc3\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610cc3908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806306552ff3146100c75780630968f264146100c25780632672f526146100bd5780633e413bee146100b85780635b58a289146100b357806361d027b3146100ae5780636844a2e9146100a957806398b1e06a146100a4578063ba3e9c121461009f578063c58f7c311461009a5763caa648b41461009557600080fd5b610945565b6108f5565b6108cc565b610739565b6106ee565b6106c5565b6105c1565b610567565b61053e565b610393565b6100e2565b6001600160a01b038116036100dd57565b600080fd5b346100dd5760803660031901126100dd576004356100ff816100cc565b6024359061010c826100cc565b604435610118816100cc565b60643590610125826100cc565b600080516020610c6e833981519152549367ffffffffffffffff60ff8660401c16159516801590816102b4575b60011490816102aa575b1590816102a1575b5061028f57600080516020610c6e833981519152805467ffffffffffffffff191660011790556101d7938561022657929060018060a01b0392838092816001600160601b0360a01b9716876000541617600055168560015416176001551683600254161760025516906003541617600355565b6101dd57005b600080516020610c6e833981519152805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b600080516020610c6e833981519152805460ff60401b191668010000000000000000179055929060018060a01b0392838092816001600160601b0360a01b9716876000541617600055168560015416176001551683600254161760025516906003541617600355565b60405163f92ee8a960e01b8152600490fd5b90501538610164565b303b15915061015c565b869150610152565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116102e657604052565b6102bc565b90601f8019910116810190811067ffffffffffffffff8211176102e657604052565b92919267ffffffffffffffff82116102e65760405191610337601f8201601f1916602001846102eb565b8294818452818301116100dd578281602093846000960137010152565b60206003198201126100dd576004359067ffffffffffffffff82116100dd57806023830112156100dd578160246103909360040135910161030d565b90565b346100dd576103a136610354565b50600080546001600160a01b03906103bc9082163314610a3d565b6003546103df906103d3906001600160a01b031681565b6001600160a01b031690565b6040516370a0823160e01b8082523060048301526020939290918481602481855afa80156104f45786918291610516575b5061041c811515610a91565b6002546001600160a01b031692803b156105125760405163f3fef3a360e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156104f4576104f9575b506002548390610484906001600160a01b03166103d3565b60405192835230600484015291928390602490829085165afa9182156104f4576104c29385936104c5575b505083546001600160a01b031690610bb6565b80f35b6104e5929350803d106104ed575b6104dd81836102eb565b810190610a76565b9038806104af565b503d6104d3565b610a85565b8061050661050c926102d2565b80610533565b3861046c565b8280fd5b61052d9150863d88116104ed576104dd81836102eb565b38610410565b60009103126100dd57565b346100dd5760003660031901126100dd576001546040516001600160a01b039091168152602090f35b346100dd5760003660031901126100dd576002546040516001600160a01b039091168152602090f35b9181601f840112156100dd5782359167ffffffffffffffff83116100dd576020808501948460051b0101116100dd57565b346100dd5760603660031901126100dd5767ffffffffffffffff6004358181116100dd576105f3903690600401610590565b90916024358181116100dd5761060d903690600401610590565b926044358381116100dd57610626903690600401610590565b9160019661063f60018060a01b03600154163314610ad6565b60005b82811061064b57005b610656818484610b2a565b3590610661826100cc565b61066c818a89610b2a565b35868210156106c0578160051b860135601e19873603018112156100dd578601928335938a85116100dd576020019184360383136100dd576106b46106ba938e96369161030d565b91610c49565b01610642565b610b14565b346100dd5760003660031901126100dd576000546040516001600160a01b039091168152602090f35b346100dd5760203660031901126100dd5760043561070b816100cc565b600154906001600160a01b03906107253383851614610ad6565b6001600160a01b0319909216911617600155005b346100dd5761074736610354565b50600061075e60018060a01b038254163314610a3d565b600254610775906103d3906001600160a01b031681565b6040516370a0823160e01b8152306004820152906020908183602481845afa9283156104f45784936108a7575b5081836107ee926107b4821515610b3a565b60035460405163095ea7b360e01b81526001600160a01b039091166004820152602481019290925290928391908290889082906044820190565b03925af180156104f457610879575b50506003548290610818906103d3906001600160a01b031681565b6002546001600160a01b03169290803b1561051257604051631e573fb760e31b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156104f45761086c575080f35b806105066104c2926102d2565b8161089892903d106108a0575b61089081836102eb565b810190610b7b565b5038806107fd565b503d610886565b6107ee9193506108c48391823d84116104ed576104dd81836102eb565b9391506107a2565b346100dd5760003660031901126100dd576003546040516001600160a01b039091168152602090f35b346100dd5760203660031901126100dd57600435610912816100cc565b6001546001600160a01b03919061092c9083163314610ad6565b166001600160601b0360a01b6003541617600355600080f35b346100dd5760003660031901126100dd5760025461096d906103d3906001600160a01b031681565b6040516370a0823160e01b80825230600483015291602091908290829060249082905afa9081156104f457600091610a20575b5060035482906109ba906103d3906001600160a01b031681565b604051948552306004860152849060249082905afa9081156104f4576109fd936109ed93600093610a01575b5050610b93565b6040519081529081906020820190565b0390f35b610a18929350803d106104ed576104dd81836102eb565b9038806109e6565b610a379150823d84116104ed576104dd81836102eb565b386109a0565b15610a4457565b60405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b6044820152606490fd5b908160209103126100dd575190565b6040513d6000823e3d90fd5b15610a9857565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b15610add57565b60405162461bcd60e51b815260206004820152600f60248201526e4f6e6c7920676f7665726e616e636560881b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b91908110156106c05760051b0190565b15610b4157565b60405162461bcd60e51b8152602060048201526012602482015271139bc81554d110c81d1bc819195c1bdcda5d60721b6044820152606490fd5b908160209103126100dd575180151581036100dd5790565b91908201809211610ba057565b634e487b7160e01b600052601160045260246000fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039490941660248301526044808301959095529381529092600091610bf66064826102eb565b519082855af115610a85576000513d610c4057506001600160a01b0381163b155b610c1e5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415610c17565b916000928392602083519301915af1604051903d6000833e15610c695750565b3d90fdfef0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220c989085a077be3968a88aa56aa575e25bd0d36bc6da5c675ed62155866b50f7f64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806306552ff3146100c75780630968f264146100c25780632672f526146100bd5780633e413bee146100b85780635b58a289146100b357806361d027b3146100ae5780636844a2e9146100a957806398b1e06a146100a4578063ba3e9c121461009f578063c58f7c311461009a5763caa648b41461009557600080fd5b610945565b6108f5565b6108cc565b610739565b6106ee565b6106c5565b6105c1565b610567565b61053e565b610393565b6100e2565b6001600160a01b038116036100dd57565b600080fd5b346100dd5760803660031901126100dd576004356100ff816100cc565b6024359061010c826100cc565b604435610118816100cc565b60643590610125826100cc565b600080516020610c6e833981519152549367ffffffffffffffff60ff8660401c16159516801590816102b4575b60011490816102aa575b1590816102a1575b5061028f57600080516020610c6e833981519152805467ffffffffffffffff191660011790556101d7938561022657929060018060a01b0392838092816001600160601b0360a01b9716876000541617600055168560015416176001551683600254161760025516906003541617600355565b6101dd57005b600080516020610c6e833981519152805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b600080516020610c6e833981519152805460ff60401b191668010000000000000000179055929060018060a01b0392838092816001600160601b0360a01b9716876000541617600055168560015416176001551683600254161760025516906003541617600355565b60405163f92ee8a960e01b8152600490fd5b90501538610164565b303b15915061015c565b869150610152565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116102e657604052565b6102bc565b90601f8019910116810190811067ffffffffffffffff8211176102e657604052565b92919267ffffffffffffffff82116102e65760405191610337601f8201601f1916602001846102eb565b8294818452818301116100dd578281602093846000960137010152565b60206003198201126100dd576004359067ffffffffffffffff82116100dd57806023830112156100dd578160246103909360040135910161030d565b90565b346100dd576103a136610354565b50600080546001600160a01b03906103bc9082163314610a3d565b6003546103df906103d3906001600160a01b031681565b6001600160a01b031690565b6040516370a0823160e01b8082523060048301526020939290918481602481855afa80156104f45786918291610516575b5061041c811515610a91565b6002546001600160a01b031692803b156105125760405163f3fef3a360e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156104f4576104f9575b506002548390610484906001600160a01b03166103d3565b60405192835230600484015291928390602490829085165afa9182156104f4576104c29385936104c5575b505083546001600160a01b031690610bb6565b80f35b6104e5929350803d106104ed575b6104dd81836102eb565b810190610a76565b9038806104af565b503d6104d3565b610a85565b8061050661050c926102d2565b80610533565b3861046c565b8280fd5b61052d9150863d88116104ed576104dd81836102eb565b38610410565b60009103126100dd57565b346100dd5760003660031901126100dd576001546040516001600160a01b039091168152602090f35b346100dd5760003660031901126100dd576002546040516001600160a01b039091168152602090f35b9181601f840112156100dd5782359167ffffffffffffffff83116100dd576020808501948460051b0101116100dd57565b346100dd5760603660031901126100dd5767ffffffffffffffff6004358181116100dd576105f3903690600401610590565b90916024358181116100dd5761060d903690600401610590565b926044358381116100dd57610626903690600401610590565b9160019661063f60018060a01b03600154163314610ad6565b60005b82811061064b57005b610656818484610b2a565b3590610661826100cc565b61066c818a89610b2a565b35868210156106c0578160051b860135601e19873603018112156100dd578601928335938a85116100dd576020019184360383136100dd576106b46106ba938e96369161030d565b91610c49565b01610642565b610b14565b346100dd5760003660031901126100dd576000546040516001600160a01b039091168152602090f35b346100dd5760203660031901126100dd5760043561070b816100cc565b600154906001600160a01b03906107253383851614610ad6565b6001600160a01b0319909216911617600155005b346100dd5761074736610354565b50600061075e60018060a01b038254163314610a3d565b600254610775906103d3906001600160a01b031681565b6040516370a0823160e01b8152306004820152906020908183602481845afa9283156104f45784936108a7575b5081836107ee926107b4821515610b3a565b60035460405163095ea7b360e01b81526001600160a01b039091166004820152602481019290925290928391908290889082906044820190565b03925af180156104f457610879575b50506003548290610818906103d3906001600160a01b031681565b6002546001600160a01b03169290803b1561051257604051631e573fb760e31b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156104f45761086c575080f35b806105066104c2926102d2565b8161089892903d106108a0575b61089081836102eb565b810190610b7b565b5038806107fd565b503d610886565b6107ee9193506108c48391823d84116104ed576104dd81836102eb565b9391506107a2565b346100dd5760003660031901126100dd576003546040516001600160a01b039091168152602090f35b346100dd5760203660031901126100dd57600435610912816100cc565b6001546001600160a01b03919061092c9083163314610ad6565b166001600160601b0360a01b6003541617600355600080f35b346100dd5760003660031901126100dd5760025461096d906103d3906001600160a01b031681565b6040516370a0823160e01b80825230600483015291602091908290829060249082905afa9081156104f457600091610a20575b5060035482906109ba906103d3906001600160a01b031681565b604051948552306004860152849060249082905afa9081156104f4576109fd936109ed93600093610a01575b5050610b93565b6040519081529081906020820190565b0390f35b610a18929350803d106104ed576104dd81836102eb565b9038806109e6565b610a379150823d84116104ed576104dd81836102eb565b386109a0565b15610a4457565b60405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b6044820152606490fd5b908160209103126100dd575190565b6040513d6000823e3d90fd5b15610a9857565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b15610add57565b60405162461bcd60e51b815260206004820152600f60248201526e4f6e6c7920676f7665726e616e636560881b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b91908110156106c05760051b0190565b15610b4157565b60405162461bcd60e51b8152602060048201526012602482015271139bc81554d110c81d1bc819195c1bdcda5d60721b6044820152606490fd5b908160209103126100dd575180151581036100dd5790565b91908201809211610ba057565b634e487b7160e01b600052601160045260246000fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039490941660248301526044808301959095529381529092600091610bf66064826102eb565b519082855af115610a85576000513d610c4057506001600160a01b0381163b155b610c1e5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415610c17565b916000928392602083519301915af1604051903d6000833e15610c695750565b3d90fdfef0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220c989085a077be3968a88aa56aa575e25bd0d36bc6da5c675ed62155866b50f7f64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 903,
        "contract": "contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol:CompoundV3StakingUSDCModule",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 905,
        "contract": "contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol:CompoundV3StakingUSDCModule",
        "label": "government",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 907,
        "contract": "contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol:CompoundV3StakingUSDCModule",
        "label": "usdc",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 909,
        "contract": "contracts/modules/arbitrum/CompoundV3USDC/CompoundV3StakingUSDCModules.sol:CompoundV3StakingUSDCModule",
        "label": "comet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}