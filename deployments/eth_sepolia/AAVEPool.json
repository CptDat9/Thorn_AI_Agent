{
  "address": "0xC564acfCDd08416acc96EeC1587DD038fD1EBc19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x74d0367dcb9e11f75c06fe21dbdaa39f8bce953e00f0a67655190891f43b5899",
  "receipt": {
    "to": null,
    "from": "0x48d66a65693dB44d3ca05CBb54e0a806096e2eDA",
    "contractAddress": "0xC564acfCDd08416acc96EeC1587DD038fD1EBc19",
    "transactionIndex": 75,
    "gasUsed": "204980",
    "logsBloom": "0x
    "blockHash": "0xe101dd516d1102b06f6fb12e184dd25a35f640f8f96554c8eb38a1712b7f806c",
    "transactionHash": "0x74d0367dcb9e11f75c06fe21dbdaa39f8bce953e00f0a67655190891f43b5899",
    "logs": [],
    "blockNumber": 7865640,
    "cumulativeGasUsed": "4151251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5b55a158eeec5b7f9193603b380a49d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supply(address,uint256,address,uint16)\":{\"params\":{\"amount\":\"The amount to be supplied\",\"asset\":\"The address of the underlying asset to supply\",\"onBehalfOf\":\"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man\"}},\"withdraw(address,uint256,address)\":{\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supply(address,uint256,address,uint16)\":{\"notice\":\"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/aave-v3/AAVEPool.sol\":\"AAVEPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/mock/aave-v3/AAVEPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\nimport \\\"./interfaces/IPoolAAVEV3.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract AAVEPool is IPoolAAVEV3 {\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external override {\\n        IERC20(asset).transferFrom(msg.sender, address(this), amount);\\n        require(referralCode == 0, \\\"Invalid referral code\\\");\\n        require(onBehalfOf == msg.sender, \\\"Invalid onBehalfOf\\\");\\n    }\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external override returns (uint256) {\\n        IERC20(asset).transfer(to, amount);\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x943a0e180cc076a2c4ab10078d0f7e1b3d896a646ecb48a4b59060e4f706ca80\",\"license\":\"MIT\"},\"contracts/mock/aave-v3/interfaces/IPoolAAVEV3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPoolAAVEV3 {\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x85cf90855170d7869fa05b92c463b5f6fc021a17e2fa81d3aa9fe054d707e305\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576102be908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c908163617ba037146100e157506369328dec1461003857600080fd5b346100dd5760603660031901126100dd57610051610207565b90602435916020610060610222565b835163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905292839160449183918991165af180156100d357602094506100a6575b5051908152f35b6100c590843d86116100cc575b6100bd8183610238565b810190610270565b503861009f565b503d6100b3565b82513d86823e3d90fd5b5080fd5b905034610203576080366003190112610203576100fc610207565b610104610222565b916064359061ffff82168092036101ff576020816064818960018060a01b0380986323b872dd60e01b84523360048501523060248501526024356044850152165af180156101f5576101d6575b5061019a5733911603610162575080f35b5162461bcd60e51b815260206004820152601260248201527124b73b30b634b21037b72132b430b63327b360711b6044820152606490fd5b825162461bcd60e51b8152602060048201526015602482015274496e76616c696420726566657272616c20636f646560581b6044820152606490fd5b6101ee9060203d6020116100cc576100bd8183610238565b5038610151565b85513d88823e3d90fd5b8580fd5b8280fd5b600435906001600160a01b038216820361021d57565b600080fd5b604435906001600160a01b038216820361021d57565b90601f8019910116810190811067ffffffffffffffff82111761025a57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261021d5751801515810361021d579056fea26469706673582212200244397ee8c43ea1755a0a6d622484678d0febc7f060e1fef5233e2934a4b20664736f6c63430008180033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c908163617ba037146100e157506369328dec1461003857600080fd5b346100dd5760603660031901126100dd57610051610207565b90602435916020610060610222565b835163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905292839160449183918991165af180156100d357602094506100a6575b5051908152f35b6100c590843d86116100cc575b6100bd8183610238565b810190610270565b503861009f565b503d6100b3565b82513d86823e3d90fd5b5080fd5b905034610203576080366003190112610203576100fc610207565b610104610222565b916064359061ffff82168092036101ff576020816064818960018060a01b0380986323b872dd60e01b84523360048501523060248501526024356044850152165af180156101f5576101d6575b5061019a5733911603610162575080f35b5162461bcd60e51b815260206004820152601260248201527124b73b30b634b21037b72132b430b63327b360711b6044820152606490fd5b825162461bcd60e51b8152602060048201526015602482015274496e76616c696420726566657272616c20636f646560581b6044820152606490fd5b6101ee9060203d6020116100cc576100bd8183610238565b5038610151565b85513d88823e3d90fd5b8580fd5b8280fd5b600435906001600160a01b038216820361021d57565b600080fd5b604435906001600160a01b038216820361021d57565b90601f8019910116810190811067ffffffffffffffff82111761025a57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261021d5751801515810361021d579056fea26469706673582212200244397ee8c43ea1755a0a6d622484678d0febc7f060e1fef5233e2934a4b20664736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supply(address,uint256,address,uint16)": {
        "params": {
          "amount": "The amount to be supplied",
          "asset": "The address of the underlying asset to supply",
          "onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
        }
      },
      "withdraw(address,uint256,address)": {
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        },
        "returns": {
          "_0": "The final amount withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "supply(address,uint256,address,uint16)": {
        "notice": "Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}